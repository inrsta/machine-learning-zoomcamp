
MetaGraphDef with tag-set: 'serve' contains the following SignatureDefs:

signature_def['__saved_model_init_op']:
  The given SavedModel SignatureDef contains the following input(s):
  The given SavedModel SignatureDef contains the following output(s):
    outputs['__saved_model_init_op'] tensor_info:
        dtype: DT_INVALID
        shape: unknown_rank
        name: NoOp
  Method name is: 

signature_def['serving_default']:
  The given SavedModel SignatureDef contains the following input(s):
    inputs['input_8'] tensor_info:
        dtype: DT_FLOAT
        shape: (-1, 299, 299, 3)
        name: serving_default_input_8:0
  The given SavedModel SignatureDef contains the following output(s):
    outputs['dense_7'] tensor_info:
        dtype: DT_FLOAT
        shape: (-1, 10)
        name: StatefulPartitionedCall:0
  Method name is: tensorflow/serving/predict
The MetaGraph with tag set ['serve'] contains the following ops: {'StringJoin', 'AssignVariableOp', 'MergeV2Checkpoints', 'AddV2', 'MatMul', 'StatefulPartitionedCall', 'MaxPool', 'Conv2D', 'Select', 'Placeholder', 'BiasAdd', 'VarHandleOp', 'NoOp', 'ReadVariableOp', 'StaticRegexFullMatch', 'FusedBatchNormV3', 'DepthwiseConv2dNative', 'RestoreV2', 'DisableCopyOnRead', 'Pack', 'Identity', 'Const', 'Mean', 'Relu', 'SaveV2', 'ShardedFilename'}

Concrete Functions:
  Function Name: '__call__'
    Option #1
      Callable with:
        Argument #1
          input_8: TensorSpec(shape=(None, 299, 299, 3), dtype=tf.float32, name='input_8')
        Argument #2
          DType: bool
          Value: False
        Argument #3
          DType: NoneType
          Value: None
    Option #2
      Callable with:
        Argument #1
          input_8: TensorSpec(shape=(None, 299, 299, 3), dtype=tf.float32, name='input_8')
        Argument #2
          DType: bool
          Value: True
        Argument #3
          DType: NoneType
          Value: None

  Function Name: '_default_save_signature'
    Option #1
      Callable with:
        Argument #1
          input_8: TensorSpec(shape=(None, 299, 299, 3), dtype=tf.float32, name='input_8')

  Function Name: 'call_and_return_all_conditional_losses'
    Option #1
      Callable with:
        Argument #1
          input_8: TensorSpec(shape=(None, 299, 299, 3), dtype=tf.float32, name='input_8')
        Argument #2
          DType: bool
          Value: True
        Argument #3
          DType: NoneType
          Value: None
    Option #2
      Callable with:
        Argument #1
          input_8: TensorSpec(shape=(None, 299, 299, 3), dtype=tf.float32, name='input_8')
        Argument #2
          DType: bool
          Value: False
        Argument #3
          DType: NoneType
          Value: None
